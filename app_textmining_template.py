# -*- coding: utf-8 -*-
"""app_textmining_TEMPLATE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pXI54PvnV_fu2gZtTcWXT1hW7c6kyZVZ

"""

import streamlit as st
from PIL import Image
import praw

from datetime import datetime
from datetime import date

import pandas as pd

import nltk
import re
import string

import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer

from sklearn.metrics.pairwise import cosine_similarity

import json
import os
from pprint import pprint
import requests
import numpy as np

from sklearn.decomposition import LatentDirichletAllocation
from gensim.models.coherencemodel import CoherenceModel
from gensim.corpora.dictionary import Dictionary
import gensim
import matplotlib.pyplot as plt

nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')

ryan_air_df = pd.read_csv("/content/ryanair_reviews.csv")

ryan_air_df['All_Text'] = ryan_air_df['Comment title'] + ' ' + ryan_air_df['Comment']

tv_pos = TfidfVectorizer(min_df = 2, max_df = 0.40, ngram_range = (2,2))
dtm = tv_pos.fit_transform(text_list_pos)
vocabulary = np.array(tv_pos.get_feature_names_out())

pd.DataFrame(dtm.toarray(), columns= vocabulary, index=['Doc_'+str(i) for i in range(len(text_list_pos))])

def clean_text(text):
    text = re.sub(r"[^a-zA-Z]", " ", text.lower())
    # Tokenize the text
    tokens = nltk.word_tokenize(text)
    tokens = [token for token in tokens if token not in stopwords.words('english')]
    # Lemmatize the text
    lemmatizer = WordNetLemmatizer()
    lemmatized_text = [lemmatizer.lemmatize(token) for token in tokens]
    # Rejoin words into continuous strings
    cleaned_text = ' '.join(lemmatized_text)

    return cleaned_text

# Apply the cleaning function to the 'All_Text' column
ryan_air_df['Clean_All'] = ryan_air_df['All_Text'].apply(clean_text)

positive_df = ryan_air_df[ryan_air_df['Overall Rating'] >= 5]
negative_df = ryan_air_df[ryan_air_df['Overall Rating'] < 5]

text_list_pos = positive_df['Clean_All'].tolist()

lda = LatentDirichletAllocation(n_components= 6, random_state=42)

def display_topics(model, feature_names, no_top_words):
    for topic_idx, topic in enumerate(model.components_):
        print("Topic %d:" % (topic_idx))
        print(", ".join([feature_names[i] for i in topic.argsort()[:-no_top_words - 1:-1]]))


no_top_words = 10
doc_topic_matrix = lda.transform(dtm)

df_doc_topic = pd.DataFrame(doc_topic_matrix, columns=[f'Topic {i}' for i in range(lda.n_components)])


text_list_neg = negative_df['Clean_All'].tolist()

tv_neg = TfidfVectorizer(min_df = 2, max_df = 0.40, ngram_range = (2,2))
dtm = tv_neg.fit_transform(text_list_neg)
vocabulary = np.array(tv_neg.get_feature_names_out())

pd.DataFrame(dtm.toarray(), columns= vocabulary, index=['Doc_'+str(i) for i in range(len(text_list_neg))])

lda = LatentDirichletAllocation(n_components= 6, random_state=42)

def display_topics(model, feature_names, no_top_words):
    for topic_idx, topic in enumerate(model.components_):
        print("Topic %d:" % (topic_idx))
        print(", ".join([feature_names[i] for i in topic.argsort()[:-no_top_words - 1:-1]]))


no_top_words = 10

tf = TfidfVectorizer(ngram_range =(1,2), min_df = 2, max_df = 0.80)                                 # set parameters for tf-idf for unigrams and bigrams
tfidf_matrix_pos = tf.fit_transform(text_list_pos)

doc_sim_pos = cosine_similarity(tfidf_matrix_pos)                                                     # compute document similarity by examining the cosine similairty b/w documents in matrix
doc_sim_df = pd.DataFrame(doc_sim_pos)

review_list = positive_df['Comment'].values
review_idx = np.where(review_list == 'Flew back from Faro to London Luton Friday 2nd February. Ryanair in both directions was bang on time and smooth flights in both directions.  We always sit in Front for more space and this was very comfortable for just under a 3 hour flight. The cabin crew were polite and efficient with nice sense of humour especially and engagement especially Ethan and his female colleague at the front section. For their human touch [unlike sometimes the stand offish BA crews] merit a 10/10 marking')[0][0]
review_similarities = doc_sim_df.iloc[review_idx].values

similar_review_idxs = np.argsort(-review_similarities)[1:6]                                                  # save the movie index of the top 5 highest similarity scores
similar_review = review_list[similar_review_idxs]

def query_review_recommender(search_query, reviews=review_list, tfidf_matrix=tfidf_matrix_pos):
    # Transform the search query into its vector form
    query_vector = tf.transform([search_query])

    cosine_similarities = cosine_similarity(query_vector, tfidf_matrix_pos)

    similar_review_idxs = cosine_similarities[0].argsort()[-5:][::-1]

    similar_review = reviews[similar_review_idxs]

    return print("Here are the top 5 customer reviews based on your topic:\n\n\n",similar_review)

query_review_recommender('Value for money')

tf = TfidfVectorizer(ngram_range =(1,2), min_df = 2, max_df = 0.80)                                 # set parameters for tf-idf for unigrams and bigrams
tfidf_matrix_neg = tf.fit_transform(text_list_neg)

doc_sim_neg = cosine_similarity(tfidf_matrix_neg)                                                     # compute document similarity by examining the cosine similairty b/w documents in matrix
doc_sim_df = pd.DataFrame(doc_sim_neg)

review_list = negative_df['Comment'].values

review_idx = np.where(review_list == "Booked a fight from Copenhagen to Poland though booking.com Somewhere in the email from booking.com it states that checkin must be done online from home. I figure I'll do it in the morning since I have plenty of time. it's low season and I don't have any checked in luggage. I live in Copenhagen not far from the airport. Morning comes and I try to check in online. No luck, apparently they close online checkin 3 hours before the flight. I figure I'll just check in at the airport at those self serve terminals. I arrive at the airport 2 hours before my flight and head for a terminal. Prompt says: kindly go to service desk. Head for service desk. They charge me 42 euro to check me in. The flight itself was 57 euro. They almost charged me the price of the flight just to check me in manually! And they forced me to check in manually by closing online and self-serve checkin. This is Ryanair policy. Apparently. Wizzair and booking are not without blame either, as they decide who they want to do business with.")[0][0]

review_similarities = doc_sim_df.iloc[review_idx].values

similar_review_idxs = np.argsort(-review_similarities)[1:6]                                                  # save the movie index of the top 5 highest similarity scores
similar_review = review_list[similar_review_idxs]

def query_review_recommender(search_query, reviews=review_list, tfidf_matrix=tfidf_matrix_neg):
    # Transform the search query into its vector form
    query_vector = tf.transform([search_query])

    cosine_similarities = cosine_similarity(query_vector, tfidf_matrix_neg)

    similar_review_idxs = cosine_similarities[0].argsort()[-5:][::-1]

    similar_review = reviews[similar_review_idxs]

    return print("Here are the 5 worst rated customer reviews based on your topic:\n\n\n",similar_review)

query_review_recommender('Luggage and Boarding Pass')


def display_positive_topics_and_reviews():
    st.title('Positive Reviews Topics and Recommendations')

    # Display topic selection
    st.write("Select a topic:")
    selected_topic = st.selectbox("Topics", [f'Topic {i}' for i in range(lda.n_components)])

    # Display top 5 reviews for the selected topic
    top_reviews = display_top_reviews(selected_topic, positive_df, tfidf_matrix_pos)
    st.write("Top 5 Customer Reviews:")
    for review in top_reviews:
        st.write(review)


def display_negative_topics_and_reviews():
    st.title('Negative Reviews Topics and Recommendations')

    # Display topic selection
    st.write("Select a topic:")
    selected_topic = st.selectbox("Topics", [f'Topic {i}' for i in range(lda.n_components)])

    # Display top 5 reviews for the selected topic
    top_reviews = display_top_reviews(selected_topic, negative_df, tfidf_matrix_neg)
    st.write("Top 5 Customer Reviews:")
    for review in top_reviews:
        st.write(review)


def display_top_reviews(selected_topic, df, tfidf_matrix):
    topic_index = int(selected_topic.split()[1])
    topic_reviews = df.iloc[df_doc_topic[df_doc_topic[selected_topic] == df_doc_topic[selected_topic].max()].index]['Comment']
    similar_reviews = query_review_recommender(topic_reviews.iloc[0], df['Comment'].values, tfidf_matrix)
    return similar_reviews


# Streamlit app layout
st.title('Ryanair Customer Reviews')

# Display the logo
logo_path = "/content/Ryanair-Logo.wine.png"  # Replace with the path to the logo file
logo = Image.open(logo_path)
st.image(logo, caption='')

# Function selection
function_selection = st.radio("Choose Functionality", ("Positive Reviews", "Negative Reviews"))

if function_selection == "Positive Reviews":
    display_positive_topics_and_reviews()
elif function_selection == "Negative Reviews":
    display_negative_topics_and_reviews()


def ask_question_and_recommend_reviews():
    st.title('Review Recommender by Question')

    # User input for question
    question = st.text_input('Ask a question:', '')

    # Button to submit the question
    if st.button('Ask'):
        if question:
            similar_reviews = query_review_recommender(question, ryan_air_df['Comment'].values, tfidf_matrix_pos)
            st.write("Top 5 Most Similar Customer Reviews:")
            for review in similar_reviews:
                st.write(review)


# Streamlit app layout
st.title('Ryanair Customer Reviews')

# Display the logo
logo_path = "/content/Ryanair-Logo.wine.png"  # Replace with the path to the logo file
logo = Image.open(logo_path)
st.image(logo, caption='')

ask_question_and_recommend_reviews()
